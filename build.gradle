
plugins {
    id 'java'
    id 'eclipse'
    id 'pmd'
    id 'jacoco'
    id 'checkstyle'
    id "com.github.spotbugs" version "2.0.0"
    id 'jdepend'

}

ext {
  pmdVersion = '6.8.0'
  jacocoVersion = '0.7.5.201505241946'
  checkstyleVersion = '6.16.1'
  FindBugsVersion = '3.0.1'
}

repositories {
    jcenter()
}

dependencies {
    implementation 'com.google.guava:guava:28.1-jre'
    testImplementation 'junit:junit:4.12'
    check.dependsOn 'cpd'
    compile 'com.google.code.findbugs:annotations:3.0.0'
}

//Plugin PMD
pmd {
  pmdTest.enabled = false
  toolVersion = pmdVersion
  ruleSetConfig = rootProject.resources.text.fromFile('config/pmd/reglesEnsembles.xml')
  ignoreFailures = true
}

tasks.withType(Pmd){
  reports{
    xml.enabled true
    html.enabled true
  }
}

//Plugin jacoco
jacoco {
  toolVersion = jacocoVersion
}

jacocoTestReport {
  reports{
    xml.enabled = true
    html.enabled = true
    csv.enabled = true
  }
}

//Plugin checkstyle
checkstyle {
  toolVersion = checkstyleVersion
   config = rootProject.resources.text.fromFile('etc/checkstyle/regles.xml')
}

// Plugin JDepend

jdepend {
    toolVersion = '2.9.1'
    ignoreFailures = true
}

tasks.withType(JDepend) {
    reports {
        text.enabled = false
        xml.enabled = true
    }
}

//Plugin SpotBugs

spotbugs {
    toolVersion '3.1.12'
    spotbugsTest.enabled = false
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
}
tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled true
        html.enabled false
    }
}


// Plugin cpd

task cpd {
    doLast {
        def cpdOutputDir = new File("build/reports/cpd")
        cpdOutputDir.mkdirs()

        ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask', classpath: configurations.pmd.asPath)

        ant.cpd(minimumTokenCount: '25', format: 'xml', outputFile: new File(cpdOutputDir, 'cpd.xml')) {
            fileset(dir: 'src/main/java') {
                include(name: '**/*.java')
            }
        }
    }
}

//Javadoc

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
    failOnError = false
}

